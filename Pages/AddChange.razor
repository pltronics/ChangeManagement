@page "/addchange"

@using ChangeManagement.Data
@using ChangeManagement.Models
@using System.ComponentModel.DataAnnotations;
@inject ChangeManagementService ChangeService
<button type="submit" class="btn btn-primary" @onclick="ShowModal">Add Change</button>
@if (showModal)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block" id="taskModal">
        <div class="modal-dialog shadow-lg bg-white rounded" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Change</h5>
                    <button type="button" class="close" @onclick="Cancel" aria-label="Close">X</button>
                </div>
                <div class="modal-body">
                    <EditForm Model="change" OnValidSubmit="AddaChange">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group row">
                            <label class="col-8 col-form-label">Title:</label>
                            <InputText @bind-Value="change.Title" />
                        </div>
                            <div class="form-group row">
                            <label class="col-8 col-form-label">Description:</label>
                            <InputTextArea @bind-Value="change.Description" />
                        </div>
                        <div class="form-group row">
                            <label class="col-8 col-form-label">Owner:</label>
                            <InputText @bind-Value="change.Owner" />
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Add Change</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
@code{
    bool showModal;
    private void ShowModal()
    {
        showModal = true;
    }

    public void HandleValidSubmit()
    {
        showModal = false;
    }
    private void Cancel()
    {
        showModal = false;
    }
    public class Change
    {
        [Required(ErrorMessage = "Title is required")]
        public string Title {get; set;}
        [Required(ErrorMessage = "Description is required")]
        public string Description {get; set;}
        public string Owner {get; set;}
    }

    Change change = new Change();

    protected override void OnInitialized()
    {
        change.Title = "";
        showModal = false;
    }

    protected async Task AddaChange()
    {
        Console.WriteLine("Button Pressed");
        await ChangeService.AddChangeAsync(change.Title, change.Description, change.Owner);
    }
}